#!/usr/bin/python
# -*- coding: iso-8859-15 -*-
#

#
# set up initial node velocities to (0,0)
# set up initial node positions randomly // make sure no 2 nodes are in exactly the same position
# loop
#     total_kinetic_energy := 0 // running sum of total kinetic energy over all particles
#     for each node
#         net-force := (0, 0) // running sum of total force on this particular node
#         
#         for each other node
#             net-force := net-force + Coulomb_repulsion( this_node, other_node )
#         next node
#         
#         for each spring connected to this node
#             net-force := net-force + Hooke_attraction( this_node, spring )
#         next spring
#         
#         // without damping, it moves forever
#         this_node.velocity := (this_node.velocity + timestep * net-force) * damping
#         this_node.position := this_node.position + timestep * this_node.velocity
#         total_kinetic_energy := total_kinetic_energy + this_node.mass * (this_node.velocity)^2
#     next node
# until total_kinetic_energy is less than some small number  // the simulation has stopped moving
#

#
# layout the meganetwork:
#  
#  1) set of changeable edges = bond with transformations
#  2) these edges induce components, which can only change in rotation/scale/translation/flipx
#  3) the components coordinates are taken from mol-files
#  4) use force algorithm or sampling
#
#  optimizing function:
#  f(P) = \alpha \sum_{p \in P} d(p,g(p)) + \beta \sum_{p \in P} \min_{d(p,p')} e^{1/d(p,p'))-1 + \gamma \sum_{e \in E} \min_{d(e,e')} e^{1/d(e,e')}-1
#  
#
#


import kegg, os, sys, time, math


# we can either take a reaction graph object, or read it from a file


def input_rg(fname):
	f = open(fname)
	lines = map(str.strip, f.readlines())
	f.close()
	
	rg = kegg.ReactionGraph()
	rg.input("tca-cycle.rg")
	
	return rg




# generates the connected sets of atoms separated by 'changebonds'
def generate_components(atoms, bonds):
	# closed-list contains processed atoms
	# start from each atom at a time, go through its neighbors until changebond or closed atom is found
	
	changebonds = [b for b in bonds if 1 in b.reactions.values() or -1 in b.reactions.values()]
	
	components = []
	closed = []
	queue = []
	
	for a in atoms:
		if a in closed:
			continue
		
		component = []
		queue = [a]
		while queue:
			next = queue.pop()
			if next in closed:
				continue
			
			component.append(next)
			closed.append(next)
			
#			print "atom %s assigned to component %d" % (str(next), len(components))
			
			for b in next.GetBondNeighbors():
				neigh = b.other(next)
				if neigh not in closed and b not in changebonds:
					queue.append(neigh)
		
		components.append(component)
	
#	atomsum = sum([1 for comp in components for a in comp])
	
#	print "found %d components, which span %d atoms out of original %d atoms" % (len(components), atomsum, len(atoms))
	
	return components


# reads the molfiles for coordinates of components
def generate_component_coords(components):
	# the atoms already have the default x's and y's from molfiles,
	# but they are faulty
	pass







def cost_function(atoms, bonds, alpha=1.0, beta=1.0, gamma=1.0):
	return alpha*atom_origin_cost(atoms) + beta*atom_overlap_cost(atoms) + gamma*bond_overlap_cost(bonds)

def atom_origin_cost(atoms):
	c = 0.0
#	for a in atoms:
#		c += dist(a, ...)
	return c

def atom_overlap_cost(atoms):
	c = 0.0
	for a in atoms:
		mindist = 10000.0
		for a2 in atoms:
			if a is not a2:
				if dist(a,a2) < mindist:
					mindist = dist(a,a2)
		c += math.exp(1.0/mindist)-1
	
	return c

def bond_overlap_cost(bonds):
	# if any bonds overlap, set the cost to infinity, otherwise compute distances
	c = 0.0
	for b in bonds:
		mindist





def dist(a,b):
	return math.sqrt((a.x-b.x)**2 + (a.y-b.y)**2)


def scale_atoms(atoms, atomdist=24, dx=0, dy=0):
	def atomdistance(a,b):
		return math.sqrt((a.x-b.x)**2 + (a.y-b.y)**2)
	
	# scale coordinates such that distance between closest atoms is exactly 24px (default)
	left = top = 20
	# find min-distance between any two atoms
	mindist = min([atomdistance(a1,a2) for a1 in atoms for a2 in atoms if a1 != a2]) if len(atoms) > 1 else 24
	# scale
	for a in atoms:
		a.x *= atomdist / mindist
		a.y *= atomdist / mindist
	
	# make all coordinates positive and left-top corner -most atom into (20,20) coordinate
	
	min_x = min([a.x for a in atoms])
	max_x = max([a.x for a in atoms])
	min_y = min([a.y for a in atoms])
	max_y = max([a.y for a in atoms])
	
	for a in atoms:
		a.x -= min_x - left - dx
		a.y -= min_y - top - dy




#atoms = []
#bonds = []

#changebonds = [b for b in bonds if b.reactions]
#components = generate_components(atoms, changebonds)

#generate_component_coords(components)


# set atom.coords = {"C00031": 3.49, "C00047":-1.89}
rg = input_rg("tca-cycle.rg")

#print rg.info()

# normalize coordinates by setting bounding box such that origo lies in the middle of the compound
for c in rg.compoundatoms:
	rg.scale_compound(c, 24)

#print 

# get components
components = generate_components(rg.atoms, rg.bonds)

print len(rg.atoms), "atoms", len(components), "components"

# then set component coordinates:
# - for atoms in only one component: set coordinates (origo in the middle)
# - for atoms in several components: choose the one which covers the whole component (origo-centering)

components = map(tuple, components)

for comp in components:
#	print
	print "processing comp (%d)" % (len(comp))
#	for a in comp:
#		print "", a
#	print
		
	moldict = {}
	for a in comp:
		for m,p in a.coords.items():
			moldict.setdefault(m,[]).append( (a,p) )
	
#	for k,v in moldict.items():
#		print " %s (%d)" % (k, len(v))
#		for (a,b) in v:
#			print " ", "%s:(%.2f,%.2f)" % (str(a),b.x,b.y)
	
	coveringmol = sorted(moldict, cmp=lambda a,b: -1 if len(a) > len(b) else 1)[-1]
	if len(moldict[coveringmol]) < len(comp):
		print "comp not covered completely !!"
		# divide the component into pieces
	
	
	# coveringmol kattaa tämän componentin
	# asetetaan x/y koordinaatit suoraan näiden perusteella (scaling)
	
	for a in comp:
		a.x = a.coords[coveringmol].x
		a.y = a.coords[coveringmol].y
	
	scale_atoms(comp)
	
#	print "resulting coordinates based on %s" % (coveringmol)
#	for a in comp:
#		print "%s: %.2f, %.2f" % (a, a.x, a.y)


# now we have the pieces of the puzzle, and only bonds between components should change
# (components can change as a whole: rotation/scaling/flipping)

#print len(components)


print "layouting..."

i = 0
middlepoint = len(components)/2
height = 0
width = 0
for comp in components:
	print "previous coordinates for component", i
	for a in comp:
		print "%s: %.2f, %.2f" % (a, a.x, a.y)
	print width, height
	scale_atoms(comp, 24, width,height)
	print "resulting coordinates for component", i
	for a in comp:
		print "%s: %.2f, %.2f" % (a, a.x, a.y)
	
#	print "compound", i
#	for a in comp:
#		print "", a.id, a.x, a.y
	
	
	i += 1
	
	if i == middlepoint:
		width = 500
		height = 0
	else:
		height = max([a.y for a in comp]) + 30

print "drawing svg..."
rg.svg("tca-cycle.svg")











# distance of x to closest point
def distance_to_closest(points, a):
	return min([dist(a,p) for p in points if a != p])

# distance between points a and b
def dist(a,b):
	return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)

# size of bounding box
def area(points):
	minx = min([p[0] for p in points])
	maxx = max([p[0] for p in points])
	miny = min([p[1] for p in points])
	maxy = max([p[1] for p in points])
	
	return (maxx-minx) * (maxy-miny)

# sum of distances to closest neighbor
def distance_sum(points):
	return sum([distance_to_closest(p) for p in points])

# optimizing function = sum of distances + area
def optimizing_function(points):
	return distance_sum(points) + area(points)

def violation(points):
	pass

def newcoordinate(p, dx, dy, theta, f):
	c = math.cos(theta)
	s = math.sin(theta)
	return [dx + (p[0]*f*(p[0]*c + p[1]*s)), dy + (p[0]*(p[1]*c - s*p[0]))]

def newcoordinates(origpoints, dx, dy, theta, f):
	return [newcoordinate(p,dx,dy,theta,f) for p in origpoints]










